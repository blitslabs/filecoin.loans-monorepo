{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4","program":"/home/tardigrade/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","hex","--edition=2018","/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=87c23f65a08b129e","-C","extra-filename=-87c23f65a08b129e","--out-dir","/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/signer/target/rls/debug/deps","-L","dependency=/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/signer/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/tardigrade/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/signer/target/rls/debug/deps/libhex-87c23f65a08b129e.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[704899870743846419,11970494043961359661]},"crate_root":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src","external_crates":[{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12933703438800314702,5774803219644544316]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6007655421670680970,17748288058820543149]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4051320655186846034,14773827427477085591]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3672675044024306215,7179779047398453100]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14739525726177289408,3061276640434149652]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2246841610299105657,12905561680815043912]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4036557704906104068,994131407893854156]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[7443407023664770875,11250036483448109314]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[10148669557414888454,6400214184476534778]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4006540472161665961,15205760237192158299]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[16043199729901662453,7825522302763349882]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[5738570549504868290,14845130516100231771]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[6807687926185025542,9498922200428406688]}},{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[6171827839412267364,4338689175470013405]}}],"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":411,"byte_end":14886,"line_start":9,"line_end":515,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":75},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1208,"byte_end":1220,"line_start":38,"line_end":38,"column_start":23,"column_end":35},"alias_span":null,"name":"FromHexError","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":411,"byte_end":14886,"line_start":9,"line_end":515,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":25},{"krate":0,"index":29},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":55},{"krate":0,"index":92},{"krate":0,"index":98},{"krate":0,"index":104},{"krate":0,"index":110},{"krate":0,"index":116},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":134},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":152},{"krate":0,"index":158},{"krate":0,"index":164},{"krate":0,"index":170},{"krate":0,"index":176},{"krate":0,"index":182},{"krate":0,"index":188},{"krate":0,"index":194},{"krate":0,"index":200},{"krate":0,"index":206},{"krate":0,"index":212},{"krate":0,"index":218},{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":248},{"krate":0,"index":254},{"krate":0,"index":260},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":278},{"krate":0,"index":284},{"krate":0,"index":290},{"krate":0,"index":296},{"krate":0,"index":302},{"krate":0,"index":308},{"krate":0,"index":314},{"krate":0,"index":320},{"krate":0,"index":326},{"krate":0,"index":332},{"krate":0,"index":338},{"krate":0,"index":344},{"krate":0,"index":350},{"krate":0,"index":356},{"krate":0,"index":362},{"krate":0,"index":368},{"krate":0,"index":374},{"krate":0,"index":380},{"krate":0,"index":386},{"krate":0,"index":392},{"krate":0,"index":398},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":416},{"krate":0,"index":422},{"krate":0,"index":428},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":446},{"krate":0,"index":452},{"krate":0,"index":458},{"krate":0,"index":464},{"krate":0,"index":470},{"krate":0,"index":476},{"krate":0,"index":482},{"krate":0,"index":488},{"krate":0,"index":494},{"krate":0,"index":500},{"krate":0,"index":506},{"krate":0,"index":512},{"krate":0,"index":518},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":536},{"krate":0,"index":542},{"krate":0,"index":548},{"krate":0,"index":554},{"krate":0,"index":560},{"krate":0,"index":566},{"krate":0,"index":572},{"krate":0,"index":578},{"krate":0,"index":584},{"krate":0,"index":590},{"krate":0,"index":596},{"krate":0,"index":602},{"krate":0,"index":608},{"krate":0,"index":614},{"krate":0,"index":620},{"krate":0,"index":626},{"krate":0,"index":632},{"krate":0,"index":638},{"krate":0,"index":644},{"krate":0,"index":650},{"krate":0,"index":656},{"krate":0,"index":662},{"krate":0,"index":668},{"krate":0,"index":674},{"krate":0,"index":680},{"krate":0,"index":686},{"krate":0,"index":692},{"krate":0,"index":698},{"krate":0,"index":704},{"krate":0,"index":710},{"krate":0,"index":716},{"krate":0,"index":722},{"krate":0,"index":728},{"krate":0,"index":734},{"krate":0,"index":740},{"krate":0,"index":746},{"krate":0,"index":752},{"krate":0,"index":758},{"krate":0,"index":764},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":782},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":800},{"krate":0,"index":806},{"krate":0,"index":812},{"krate":0,"index":818},{"krate":0,"index":824},{"krate":0,"index":830},{"krate":0,"index":836},{"krate":0,"index":842},{"krate":0,"index":848},{"krate":0,"index":854},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":872},{"krate":0,"index":878},{"krate":0,"index":884},{"krate":0,"index":890},{"krate":0,"index":896},{"krate":0,"index":902},{"krate":0,"index":908},{"krate":0,"index":914},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":932},{"krate":0,"index":938},{"krate":0,"index":944},{"krate":0,"index":950},{"krate":0,"index":956},{"krate":0,"index":962},{"krate":0,"index":968},{"krate":0,"index":974},{"krate":0,"index":980},{"krate":0,"index":986},{"krate":0,"index":992},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":1016},{"krate":0,"index":1022},{"krate":0,"index":1028},{"krate":0,"index":1034},{"krate":0,"index":1040},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[{"value":"/ Encoding and decoding hex strings.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":411,"byte_end":449,"line_start":9,"line_end":9,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":450,"byte_end":453,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ For most cases, you can simply use the [`decode`], [`encode`] and","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":454,"byte_end":523,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ [`encode_upper`] functions. If you need a bit more control, use the traits","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":524,"byte_end":602,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ [`ToHex`] and [`FromHex`] instead.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":603,"byte_end":641,"line_start":13,"line_end":13,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":642,"byte_end":645,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":646,"byte_end":659,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":660,"byte_end":663,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":664,"byte_end":671,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ let hex_string = hex::encode(\"Hello world!\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":672,"byte_end":721,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":722,"byte_end":725,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", hex_string); // Prints \"48656c6c6f20776f726c6421\"","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":726,"byte_end":794,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":795,"byte_end":798,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # assert_eq!(hex_string, \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":799,"byte_end":856,"line_start":22,"line_end":22,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":857,"byte_end":864,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"allow(clippy :: unreadable_literal)","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1001,"byte_end":1038,"line_start":28,"line_end":28,"column_start":1,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":76},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15140,"byte_end":15159,"line_start":8,"line_end":8,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::error::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[{"value":"/ An invalid character was found. Valid ones are: `0...9`, `a...f`","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15047,"byte_end":15115,"line_start":6,"line_end":6,"column_start":5,"column_end":73}},{"value":"/ or `A...F`.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15120,"byte_end":15135,"line_start":7,"line_end":7,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":79},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15286,"byte_end":15295,"line_start":12,"line_end":12,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::error::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[{"value":"/ A hex string's length needs to be even, as two digits correspond to","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15192,"byte_end":15263,"line_start":10,"line_end":10,"column_start":5,"column_end":76}},{"value":"/ one byte.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15268,"byte_end":15281,"line_start":11,"line_end":11,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":81},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15468,"byte_end":15487,"line_start":17,"line_end":17,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::error::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":75},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[{"value":"/ If the hex string is decoded into a fixed sized container, such as an","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15302,"byte_end":15375,"line_start":14,"line_end":14,"column_start":5,"column_end":78}},{"value":"/ array, the hex string's length * 2 has to match the container's","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15380,"byte_end":15447,"line_start":15,"line_end":15,"column_start":5,"column_end":72}},{"value":"/ length.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15452,"byte_end":15463,"line_start":16,"line_end":16,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":75},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15028,"byte_end":15040,"line_start":5,"line_end":5,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::error::FromHexError","value":"pub enum FromHexError {\n\n    /// An invalid character was found. Valid ones are: `0...9`, `a...f`\n    /// or `A...F`.\n    InvalidHexCharacter {\n        c: char,\n        index: usize,\n    },\n\n    /// A hex string's length needs to be even, as two digits correspond to\n    /// one byte.\n    OddLength,\n\n    /// If the hex string is decoded into a fixed sized container, such as an\n    /// array, the hex string's length * 2 has to match the container's\n    /// length.\n    InvalidStringLength,\n}","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":81}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"/ The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":14904,"byte_end":14977,"line_start":3,"line_end":3,"column_start":1,"column_end":74}}]},{"kind":"Trait","id":{"krate":0,"index":10},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1883,"byte_end":1888,"line_start":61,"line_end":61,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":13}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[{"value":"/ Encoding values as hex string.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1405,"byte_end":1439,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1440,"byte_end":1443,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for all `T` which implement `AsRef<[u8]>`. This","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1444,"byte_end":1521,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ includes `String`, `str`, `Vec<u8>` and `[u8]`.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1522,"byte_end":1573,"line_start":49,"line_end":49,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1574,"byte_end":1577,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1578,"byte_end":1591,"line_start":51,"line_end":51,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1592,"byte_end":1595,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1596,"byte_end":1603,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/ use hex::ToHex;","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1604,"byte_end":1623,"line_start":54,"line_end":54,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1624,"byte_end":1627,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", \"Hello world!\".encode_hex::<String>());","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1628,"byte_end":1686,"line_start":56,"line_end":56,"column_start":1,"column_end":59}},{"value":"/ # assert_eq!(\"Hello world!\".encode_hex::<String>(), \"48656c6c6f20776f726c6421\".to_string());","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1687,"byte_end":1783,"line_start":57,"line_end":57,"column_start":1,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1784,"byte_end":1791,"line_start":58,"line_end":58,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1792,"byte_end":1795,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ *Note*: instead of using this trait, you might want to use [`encode()`].","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1796,"byte_end":1872,"line_start":60,"line_end":60,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":11},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2018,"byte_end":2028,"line_start":64,"line_end":64,"column_start":8,"column_end":18},"name":"encode_hex","qualname":"::ToHex::encode_hex","value":"pub fn encode_hex<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `f9b4ca`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1895,"byte_end":1969,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `f9b4ca`)","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":1974,"byte_end":2010,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2199,"byte_end":2215,"line_start":68,"line_end":68,"column_start":8,"column_end":24},"name":"encode_hex_upper","qualname":"::ToHex::encode_hex_upper","value":"pub fn encode_hex_upper<T: iter::FromIterator<char>>(&Self) -> T","parent":{"krate":0,"index":10},"children":[],"decl_id":null,"docs":" Encode the hex strict representing `self` into the result.. Lower case\n letters are used (e.g. `F9B4CA`)\n","sig":null,"attributes":[{"value":"/ Encode the hex strict representing `self` into the result.. Lower case","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2076,"byte_end":2150,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ letters are used (e.g. `F9B4CA`)","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2155,"byte_end":2191,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4406,"byte_end":4413,"line_start":154,"line_end":154,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[{"value":"/ Types that can be decoded from a hex string.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":3968,"byte_end":4016,"line_start":134,"line_end":134,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4017,"byte_end":4020,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented for `Vec<u8>` and small `u8`-arrays.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4021,"byte_end":4087,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4088,"byte_end":4091,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4092,"byte_end":4105,"line_start":138,"line_end":138,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4106,"byte_end":4109,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4110,"byte_end":4117,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/ use hex::FromHex;","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4118,"byte_end":4139,"line_start":141,"line_end":141,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4140,"byte_end":4143,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ match Vec::from_hex(\"48656c6c6f20776f726c6421\") {","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4144,"byte_end":4197,"line_start":143,"line_end":143,"column_start":1,"column_end":54}},{"value":"/     Ok(vec) => {","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4198,"byte_end":4218,"line_start":144,"line_end":144,"column_start":1,"column_end":21}},{"value":"/         for b in vec {","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4219,"byte_end":4245,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"/             println!(\"{}\", b as char);","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4246,"byte_end":4288,"line_start":146,"line_end":146,"column_start":1,"column_end":43}},{"value":"/         }","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4289,"byte_end":4302,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4303,"byte_end":4312,"line_start":148,"line_end":148,"column_start":1,"column_end":10}},{"value":"/     Err(e) => {","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4313,"byte_end":4332,"line_start":149,"line_end":149,"column_start":1,"column_end":20}},{"value":"/         // Deal with the error ...","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4333,"byte_end":4371,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4372,"byte_end":4381,"line_start":151,"line_end":151,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4382,"byte_end":4387,"line_start":152,"line_end":152,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4388,"byte_end":4395,"line_start":153,"line_end":153,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4432,"byte_end":4437,"line_start":155,"line_end":155,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4716,"byte_end":4724,"line_start":162,"line_end":162,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"pub fn from_hex<T: AsRef<[u8]>>(T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[{"value":"/ Creates an instance of type `Self` from the given hex string, or fails","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4444,"byte_end":4518,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/ with a custom error type.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4523,"byte_end":4552,"line_start":158,"line_end":158,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4557,"byte_end":4560,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Both, upper and lower case characters are valid and can even be","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4565,"byte_end":4632,"line_start":160,"line_end":160,"column_start":5,"column_end":72}},{"value":"/ mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4637,"byte_end":4708,"line_start":161,"line_end":161,"column_start":5,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7810,"byte_end":7816,"line_start":258,"line_end":258,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"pub fn encode<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using lowercase characters.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7309,"byte_end":7369,"line_start":245,"line_end":245,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7370,"byte_end":7373,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ Lowercase characters are used (e.g. `f9b4ca`). The resulting string's","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7374,"byte_end":7447,"line_start":247,"line_end":247,"column_start":1,"column_end":74}},{"value":"/ length is always even, each byte in `data` is always encoded using two hex","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7448,"byte_end":7526,"line_start":248,"line_end":248,"column_start":1,"column_end":79}},{"value":"/ digits. Thus, the resulting string contains exactly twice as many bytes as","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7527,"byte_end":7605,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ the input data.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7606,"byte_end":7625,"line_start":250,"line_end":250,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7626,"byte_end":7629,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7630,"byte_end":7643,"line_start":252,"line_end":252,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7644,"byte_end":7647,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7648,"byte_end":7655,"line_start":254,"line_end":254,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode(\"Hello world!\"), \"48656c6c6f20776f726c6421\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7656,"byte_end":7728,"line_start":255,"line_end":255,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(hex::encode(vec![1, 2, 3, 15, 16]), \"0102030f10\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7729,"byte_end":7794,"line_start":256,"line_end":256,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7795,"byte_end":7802,"line_start":257,"line_end":257,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8215,"byte_end":8227,"line_start":272,"line_end":272,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"pub fn encode_upper<T: AsRef<[u8]>>(T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[{"value":"/ Encodes `data` as hex string using uppercase characters.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7879,"byte_end":7939,"line_start":262,"line_end":262,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7940,"byte_end":7943,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ Apart from the characters' casing, this works exactly like `encode()`.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":7944,"byte_end":8018,"line_start":264,"line_end":264,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8019,"byte_end":8022,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8023,"byte_end":8036,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8037,"byte_end":8040,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8041,"byte_end":8048,"line_start":268,"line_end":268,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(hex::encode_upper(\"Hello world!\"), \"48656C6C6F20776F726C6421\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8049,"byte_end":8127,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ assert_eq!(hex::encode_upper(vec![1, 2, 3, 15, 16]), \"0102030F10\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8128,"byte_end":8199,"line_start":270,"line_end":270,"column_start":1,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8200,"byte_end":8207,"line_start":271,"line_end":271,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8786,"byte_end":8792,"line_start":292,"line_end":292,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"pub fn decode<T: AsRef<[u8]>>(T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[{"value":"/ Decodes a hex string into raw bytes.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8296,"byte_end":8336,"line_start":276,"line_end":276,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8337,"byte_end":8340,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8341,"byte_end":8420,"line_start":278,"line_end":278,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8421,"byte_end":8500,"line_start":279,"line_end":279,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8501,"byte_end":8504,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8505,"byte_end":8518,"line_start":281,"line_end":281,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8519,"byte_end":8522,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8523,"byte_end":8530,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8531,"byte_end":8546,"line_start":284,"line_end":284,"column_start":1,"column_end":16}},{"value":"/     hex::decode(\"48656c6c6f20776f726c6421\"),","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8547,"byte_end":8595,"line_start":285,"line_end":285,"column_start":1,"column_end":49}},{"value":"/     Ok(\"Hello world!\".to_owned().into_bytes())","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8596,"byte_end":8646,"line_start":286,"line_end":286,"column_start":1,"column_end":51}},{"value":"/ );","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8647,"byte_end":8653,"line_start":287,"line_end":287,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8654,"byte_end":8657,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(hex::decode(\"123\"), Err(hex::FromHexError::OddLength));","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8658,"byte_end":8728,"line_start":289,"line_end":289,"column_start":1,"column_end":71}},{"value":"/ assert!(hex::decode(\"foo\").is_err());","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8729,"byte_end":8770,"line_start":290,"line_end":290,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8771,"byte_end":8778,"line_start":291,"line_end":291,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9291,"byte_end":9306,"line_start":308,"line_end":308,"column_start":8,"column_end":23},"name":"decode_to_slice","qualname":"::decode_to_slice","value":"pub fn decode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decode a hex string into a mutable bytes slice.","sig":null,"attributes":[{"value":"/ Decode a hex string into a mutable bytes slice.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8884,"byte_end":8935,"line_start":296,"line_end":296,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8936,"byte_end":8939,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ Both, upper and lower case characters are valid in the input string and can","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":8940,"byte_end":9019,"line_start":298,"line_end":298,"column_start":1,"column_end":80}},{"value":"/ even be mixed (e.g. `f9b4ca`, `F9B4CA` and `f9B4Ca` are all valid strings).","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9020,"byte_end":9099,"line_start":299,"line_end":299,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9100,"byte_end":9103,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9104,"byte_end":9117,"line_start":301,"line_end":301,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9118,"byte_end":9121,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9122,"byte_end":9129,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/ let mut bytes = [0u8; 4];","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9130,"byte_end":9159,"line_start":304,"line_end":304,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(hex::decode_to_slice(\"6b697769\", &mut bytes as &mut [u8]), Ok(()));","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9160,"byte_end":9242,"line_start":305,"line_end":305,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(&bytes, b\"kiwi\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9243,"byte_end":9275,"line_start":306,"line_end":306,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":9276,"byte_end":9283,"line_start":307,"line_end":307,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10603,"byte_end":10618,"line_start":360,"line_end":360,"column_start":8,"column_end":23},"name":"encode_to_slice","qualname":"::encode_to_slice","value":"pub fn encode_to_slice<T: AsRef<[u8]>>(T, &mut [u8])\n-> Result<(), FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Encodes some bytes into a mutable slice of bytes.","sig":null,"attributes":[{"value":"/ Encodes some bytes into a mutable slice of bytes.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10151,"byte_end":10204,"line_start":343,"line_end":343,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10205,"byte_end":10208,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ The output buffer, has to be able to hold at least `input.len() * 2` bytes,","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10209,"byte_end":10288,"line_start":345,"line_end":345,"column_start":1,"column_end":80}},{"value":"/ otherwise this function will return an error.","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10289,"byte_end":10338,"line_start":346,"line_end":346,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10339,"byte_end":10342,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10343,"byte_end":10356,"line_start":348,"line_end":348,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10357,"byte_end":10360,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10361,"byte_end":10368,"line_start":350,"line_end":350,"column_start":1,"column_end":8}},{"value":"/ # use hex::FromHexError;","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10369,"byte_end":10397,"line_start":351,"line_end":351,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), FromHexError> {","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10398,"byte_end":10443,"line_start":352,"line_end":352,"column_start":1,"column_end":46}},{"value":"/ let mut bytes = [0u8; 4 * 2];","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10444,"byte_end":10477,"line_start":353,"line_end":353,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10478,"byte_end":10481,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ hex::encode_to_slice(b\"kiwi\", &mut bytes)?;","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10482,"byte_end":10529,"line_start":355,"line_end":355,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(&bytes, b\"6b697769\");","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10530,"byte_end":10566,"line_start":356,"line_end":356,"column_start":1,"column_end":37}},{"value":"/ # Ok(())","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10567,"byte_end":10579,"line_start":357,"line_end":357,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10580,"byte_end":10587,"line_start":358,"line_end":358,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":10588,"byte_end":10595,"line_start":359,"line_end":359,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15543,"byte_end":15555,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15582,"byte_end":15594,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2509,"byte_end":2524,"line_start":80,"line_end":80,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2753,"byte_end":2768,"line_start":90,"line_end":90,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":3341,"byte_end":3356,"line_start":110,"line_end":110,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":3710,"byte_end":3711,"line_start":124,"line_end":124,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":5539,"byte_end":5542,"line_start":189,"line_end":189,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15543,"byte_end":15555,"line_start":21,"line_end":21,"column_start":28,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":75},"to":{"krate":1,"index":1724}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/error.rs","byte_start":15582,"byte_end":15594,"line_start":23,"line_end":23,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":75},"to":{"krate":2,"index":6836}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2509,"byte_end":2524,"line_start":80,"line_end":80,"column_start":10,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":19},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":2753,"byte_end":2768,"line_start":90,"line_end":90,"column_start":23,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":19},"to":{"krate":2,"index":5536}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":3341,"byte_end":3356,"line_start":110,"line_end":110,"column_start":38,"column_end":53},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":19},"to":{"krate":2,"index":5490}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":3710,"byte_end":3711,"line_start":124,"line_end":124,"column_start":32,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":42},"to":{"krate":0,"index":10}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":4415,"byte_end":4420,"line_start":154,"line_end":154,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2076},"to":{"krate":0,"index":47}},{"span":{"file_name":"/home/tardigrade/.cargo/git/checkouts/rust-hex-e9c4c35e7ec5bed6/6e35fb4/src/lib.rs","byte_start":5539,"byte_end":5542,"line_start":189,"line_end":189,"column_start":18,"column_end":21},"kind":{"Impl":{"id":6}},"from":{"krate":5,"index":4841},"to":{"krate":0,"index":47}}]}