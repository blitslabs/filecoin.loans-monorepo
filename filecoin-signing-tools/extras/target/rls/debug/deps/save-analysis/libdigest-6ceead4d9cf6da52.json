{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0","program":"/home/tardigrade/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","digest","--edition=2018","/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=6ceead4d9cf6da52","-C","extra-filename=-6ceead4d9cf6da52","--out-dir","/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/extras/target/rls/debug/deps","-L","dependency=/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/extras/target/rls/debug/deps","--extern","generic_array=/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/extras/target/rls/debug/deps/libgeneric_array-0b368f4d9c5b0288.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/tardigrade/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tardigrade/filecoin/filecoin_loans_test/filecoin-signing-tools/extras/target/rls/debug/deps/libdigest-6ceead4d9cf6da52.rmeta"},"prelude":{"crate_id":{"name":"digest","disambiguator":[15600184753312587814,14879726161699901804]},"crate_root":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src","external_crates":[{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[18134888982608726624,15478788479473023395]}},{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[6673302632599048863,4691371433878452070]}},{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[11457885127507258025,479752930606968628]}},{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","num":4,"id":{"name":"generic_array","disambiguator":[13430943019090275013,2394720062930644505]}},{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","num":5,"id":{"name":"typenum","disambiguator":[5663052881271804469,10689305434871740406]}}],"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":0,"byte_end":3567,"line_start":1,"line_end":110,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":13},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1842,"byte_end":1848,"line_start":49,"line_end":49,"column_start":25,"column_end":31},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1850,"byte_end":1856,"line_start":49,"line_end":49,"column_start":33,"column_end":39},"alias_span":null,"name":"Output","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":131},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1882,"byte_end":1899,"line_start":50,"line_end":50,"column_start":24,"column_end":41},"alias_span":null,"name":"InvalidOutputSize","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":132},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1882,"byte_end":1899,"line_start":50,"line_end":50,"column_start":24,"column_end":41},"alias_span":null,"name":"InvalidOutputSize","value":"","parent":{"krate":0,"index":106}},{"kind":"Use","ref_id":{"krate":0,"index":49},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1924,"byte_end":1935,"line_start":51,"line_end":51,"column_start":24,"column_end":35},"alias_span":null,"name":"FixedOutput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1937,"byte_end":1953,"line_start":51,"line_end":51,"column_start":37,"column_end":53},"alias_span":null,"name":"FixedOutputDirty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":67},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1982,"byte_end":1996,"line_start":52,"line_end":52,"column_start":27,"column_end":41},"alias_span":null,"name":"VariableOutput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1998,"byte_end":2017,"line_start":52,"line_end":52,"column_start":43,"column_end":62},"alias_span":null,"name":"VariableOutputDirty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2041,"byte_end":2057,"line_start":53,"line_end":53,"column_start":22,"column_end":38},"alias_span":null,"name":"ExtendableOutput","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":95},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2059,"byte_end":2080,"line_start":53,"line_end":53,"column_start":40,"column_end":61},"alias_span":null,"name":"ExtendableOutputDirty","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":89},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2082,"byte_end":2091,"line_start":53,"line_end":53,"column_start":63,"column_end":72},"alias_span":null,"name":"XofReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2102,"byte_end":2115,"line_start":54,"line_end":54,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":5,"index":2346},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2133,"byte_end":2139,"line_start":54,"line_end":54,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":0,"byte_end":3567,"line_start":1,"line_end":110,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":40},{"krate":0,"index":44},{"krate":0,"index":63},{"krate":0,"index":87},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":170},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":126},{"krate":0,"index":128}],"decl_id":null,"docs":" This crate provides traits which describe functionality of cryptographic hash\n functions.","sig":null,"attributes":[{"value":"/ This crate provides traits which describe functionality of cryptographic hash","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ functions.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":82,"byte_end":96,"line_start":2,"line_end":2,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":97,"byte_end":100,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Traits in this repository are organized into high-level convenience traits,","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":101,"byte_end":180,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ mid-level traits which expose more fine-grained functionality, and","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":181,"byte_end":251,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ low-level traits intended to only be used by algorithm implementations:","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":252,"byte_end":327,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":328,"byte_end":331,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ - **High-level convenience traits**: [`Digest`], [`DynDigest`]. They are wrappers","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":332,"byte_end":417,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/   around lower-level traits for most common hash-function use-cases.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":418,"byte_end":490,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ - **Mid-level traits**: [`Update`], [`BlockInput`], [`Reset`], [`FixedOutput`],","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":491,"byte_end":574,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"/   [`VariableOutput`], [`ExtendableOutput`]. These traits atomically describe","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":575,"byte_end":655,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/   available functionality of hash function implementations.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":656,"byte_end":719,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ - **Low-level traits**: [`FixedOutputDirty`], [`VariableOutputDirty`],","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":720,"byte_end":794,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/   [`ExtendableOutputDirty`]. These traits are intended to be implemented by","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":795,"byte_end":874,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/   low-level algorithm providers only and simplify the amount of work","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":875,"byte_end":947,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/   implementers need to do and therefore shouldn't be used in","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":948,"byte_end":1012,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/   application-level code.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1013,"byte_end":1042,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1043,"byte_end":1046,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Additionally hash functions implement traits from the standard library:","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1047,"byte_end":1122,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ `Default`, `Clone`, `Write`. The latter is feature-gated behind `std` feature,","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1123,"byte_end":1205,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ which is usually enabled by default by hash implementation crates.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1206,"byte_end":1276,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1277,"byte_end":1280,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The [`Digest`] trait is the most commonly used trait.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1281,"byte_end":1338,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"no_std","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1340,"byte_end":1350,"line_start":25,"line_end":25,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1390,"byte_end":1413,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms)","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":1513,"byte_end":1553,"line_start":29,"line_end":29,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3952,"byte_end":3958,"line_start":9,"line_end":9,"column_start":11,"column_end":17},"name":"Digest","qualname":"::digest::Digest","value":"Digest","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" The `Digest` trait specifies an interface common for digest functions.","sig":null,"attributes":[{"value":"/ The `Digest` trait specifies an interface common for digest functions.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3697,"byte_end":3771,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3772,"byte_end":3775,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It's a convenience wrapper around [`Update`], [`FixedOutput`], [`Reset`],","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3776,"byte_end":3853,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ [`Clone`], and [`Default`] traits. It also provides additional convenience methods.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3854,"byte_end":3941,"line_start":8,"line_end":8,"column_start":1,"column_end":88}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4003,"byte_end":4013,"line_start":11,"line_end":11,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::digest::Digest::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Output size for `Digest`\n","sig":null,"attributes":[{"value":"/ Output size for `Digest`","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":3965,"byte_end":3993,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4075,"byte_end":4078,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"new","qualname":"::digest::Digest::new","value":"pub fn new() -> Self","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Create new hasher instance\n","sig":null,"attributes":[{"value":"/ Create new hasher instance","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4037,"byte_end":4067,"line_start":13,"line_end":13,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4234,"byte_end":4240,"line_start":19,"line_end":19,"column_start":8,"column_end":14},"name":"update","qualname":"::digest::Digest::update","value":"pub fn update<impl AsRef<[u8]>: AsRef<[u8]>>(&mut Self, impl AsRef<[u8]>)","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Digest data, updating the internal state.","sig":null,"attributes":[{"value":"/ Digest data, updating the internal state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4095,"byte_end":4140,"line_start":16,"line_end":16,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4145,"byte_end":4148,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ This method can be called repeatedly for use with streaming messages.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4153,"byte_end":4226,"line_start":18,"line_end":18,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4332,"byte_end":4337,"line_start":22,"line_end":22,"column_start":8,"column_end":13},"name":"chain","qualname":"::digest::Digest::chain","value":"pub fn chain<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>) -> Self\nwhere Self: Sized","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Digest input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Digest input data in a chained manner.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4282,"byte_end":4324,"line_start":21,"line_end":21,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4468,"byte_end":4476,"line_start":27,"line_end":27,"column_start":8,"column_end":16},"name":"finalize","qualname":"::digest::Digest::finalize","value":"pub fn finalize(Self) -> Output<Self>","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Retrieve result and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4412,"byte_end":4460,"line_start":26,"line_end":26,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4659,"byte_end":4673,"line_start":33,"line_end":33,"column_start":8,"column_end":22},"name":"finalize_reset","qualname":"::digest::Digest::finalize_reset","value":"pub fn finalize_reset(&mut Self) -> Output<Self>","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Retrieve result and reset hasher instance.","sig":null,"attributes":[{"value":"/ Retrieve result and reset hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4505,"byte_end":4551,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4556,"byte_end":4559,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This method sometimes can be more efficient compared to hasher","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4564,"byte_end":4630,"line_start":31,"line_end":31,"column_start":5,"column_end":71}},{"value":"/ re-creation.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4635,"byte_end":4651,"line_start":32,"line_end":32,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4762,"byte_end":4767,"line_start":36,"line_end":36,"column_start":8,"column_end":13},"name":"reset","qualname":"::digest::Digest::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4707,"byte_end":4754,"line_start":35,"line_end":35,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4826,"byte_end":4837,"line_start":39,"line_end":39,"column_start":8,"column_end":19},"name":"output_size","qualname":"::digest::Digest::output_size","value":"pub fn output_size() -> usize","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Get output size of the hasher\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4785,"byte_end":4818,"line_start":38,"line_end":38,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5121,"byte_end":5127,"line_start":49,"line_end":49,"column_start":8,"column_end":14},"name":"digest","qualname":"::digest::Digest::digest","value":"pub fn digest(&[u8]) -> Output<Self>","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Convenience function to compute hash of the `data`. It will handle\n hasher creation, data feeding and finalization.","sig":null,"attributes":[{"value":"/ Convenience function to compute hash of the `data`. It will handle","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4855,"byte_end":4925,"line_start":41,"line_end":41,"column_start":5,"column_end":75}},{"value":"/ hasher creation, data feeding and finalization.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4930,"byte_end":4981,"line_start":42,"line_end":42,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4986,"byte_end":4989,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Example:","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":4994,"byte_end":5006,"line_start":44,"line_end":44,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5011,"byte_end":5014,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```rust,ignore","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5019,"byte_end":5037,"line_start":46,"line_end":46,"column_start":5,"column_end":23}},{"value":"/ println!(\"{:x}\", sha2::Sha256::digest(b\"Hello world\"));","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5042,"byte_end":5101,"line_start":47,"line_end":47,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5106,"byte_end":5113,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":6147,"byte_end":6153,"line_start":96,"line_end":96,"column_start":10,"column_end":16},"name":"Output","qualname":"::digest::Output","value":"GenericArray<u8, <D as Digest>::OutputSize>","parent":null,"children":[],"decl_id":null,"docs":" Output of a [`Digest`] function\n","sig":null,"attributes":[{"value":"/ Output of a [`Digest`] function","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":6102,"byte_end":6137,"line_start":95,"line_end":95,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":131},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/errors.rs","byte_start":8021,"byte_end":8038,"line_start":5,"line_end":5,"column_start":12,"column_end":29},"name":"InvalidOutputSize","qualname":"::errors::InvalidOutputSize","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type for variable hasher initialization\n","sig":null,"attributes":[{"value":"/ The error type for variable hasher initialization","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/errors.rs","byte_start":7917,"byte_end":7970,"line_start":3,"line_end":3,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8444,"byte_end":8455,"line_start":7,"line_end":7,"column_start":11,"column_end":22},"name":"FixedOutput","qualname":"::fixed::FixedOutput","value":"FixedOutput","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54}],"decl_id":null,"docs":" Trait for returning digest result with the fixed size\n","sig":null,"attributes":[{"value":"/ Trait for returning digest result with the fixed size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8376,"byte_end":8433,"line_start":6,"line_end":6,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":50},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8511,"byte_end":8521,"line_start":9,"line_end":9,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::fixed::FixedOutput::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Output size for fixed output digest\n","sig":null,"attributes":[{"value":"/ Output size for fixed output digest","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8462,"byte_end":8501,"line_start":8,"line_end":8,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8622,"byte_end":8635,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"finalize_into","qualname":"::fixed::FixedOutput::finalize_into","value":"pub fn finalize_into(Self, &mut GenericArray<u8, Self::OutputSize>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Write result into provided array and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and consume the hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8545,"byte_end":8614,"line_start":11,"line_end":11,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8769,"byte_end":8788,"line_start":15,"line_end":15,"column_start":8,"column_end":27},"name":"finalize_into_reset","qualname":"::fixed::FixedOutput::finalize_into_reset","value":"pub fn finalize_into_reset(&mut Self, &mut GenericArray<u8, Self::OutputSize>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Write result into provided array and reset the hasher instance.\n","sig":null,"attributes":[{"value":"/ Write result into provided array and reset the hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8694,"byte_end":8761,"line_start":14,"line_end":14,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8926,"byte_end":8940,"line_start":19,"line_end":19,"column_start":8,"column_end":22},"name":"finalize_fixed","qualname":"::fixed::FixedOutput::finalize_fixed","value":"pub fn finalize_fixed(Self) -> GenericArray<u8, Self::OutputSize> where\nSelf: Sized","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Retrieve result and consume the hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and consume the hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8852,"byte_end":8904,"line_start":17,"line_end":17,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":8909,"byte_end":8918,"line_start":18,"line_end":18,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9197,"byte_end":9217,"line_start":30,"line_end":30,"column_start":8,"column_end":28},"name":"finalize_fixed_reset","qualname":"::fixed::FixedOutput::finalize_fixed_reset","value":"pub fn finalize_fixed_reset(&mut Self) -> GenericArray<u8, Self::OutputSize>","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Retrieve result and reset the hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve result and reset the hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9125,"byte_end":9175,"line_start":28,"line_end":28,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9180,"byte_end":9189,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":55},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9748,"byte_end":9764,"line_start":46,"line_end":46,"column_start":11,"column_end":27},"name":"FixedOutputDirty","qualname":"::fixed::FixedOutputDirty","value":"FixedOutputDirty","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" Trait for fixed-output digest implementations to use to retrieve the\n hash output.","sig":null,"attributes":[{"value":"/ Trait for fixed-output digest implementations to use to retrieve the","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9376,"byte_end":9448,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"/ hash output.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9449,"byte_end":9465,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9466,"byte_end":9469,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait in user code is discouraged. Instead use the","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9470,"byte_end":9538,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ [`FixedOutput::finalize_fixed`] or [`FixedOutput::finalize_fixed_reset`]","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9539,"byte_end":9615,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ methods.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9616,"byte_end":9628,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9629,"byte_end":9632,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Types which impl this trait along with [`Reset`] will receive a blanket","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9633,"byte_end":9708,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ impl of [`FixedOutput`].","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9709,"byte_end":9737,"line_start":45,"line_end":45,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":56},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9820,"byte_end":9830,"line_start":48,"line_end":48,"column_start":10,"column_end":20},"name":"OutputSize","qualname":"::fixed::FixedOutputDirty::OutputSize","value":"type OutputSize: ArrayLength<u8>;","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Output size for fixed output digest\n","sig":null,"attributes":[{"value":"/ Output size for fixed output digest","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9771,"byte_end":9810,"line_start":47,"line_end":47,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":10121,"byte_end":10140,"line_start":55,"line_end":55,"column_start":8,"column_end":27},"name":"finalize_into_dirty","qualname":"::fixed::FixedOutputDirty::finalize_into_dirty","value":"pub fn finalize_into_dirty(&mut Self, &mut GenericArray<u8, Self::OutputSize>)","parent":{"krate":0,"index":55},"children":[],"decl_id":null,"docs":" Retrieve result into provided buffer and leave hasher in a dirty state.","sig":null,"attributes":[{"value":"/ Retrieve result into provided buffer and leave hasher in a dirty state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9854,"byte_end":9929,"line_start":50,"line_end":50,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9934,"byte_end":9937,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This method is expected to only be called once unless","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":9942,"byte_end":9999,"line_start":52,"line_end":52,"column_start":5,"column_end":62}},{"value":"/ [`Reset::reset`] is called, after which point it can be","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":10004,"byte_end":10063,"line_start":53,"line_end":53,"column_start":5,"column_end":64}},{"value":"/ called again and reset again (and so on).","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":10068,"byte_end":10113,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":67},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10806,"byte_end":10820,"line_start":9,"line_end":9,"column_start":11,"column_end":25},"name":"VariableOutput","qualname":"::variable::VariableOutput","value":"VariableOutput: Sized","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72}],"decl_id":null,"docs":" Trait for returning digest result with the variable size\n","sig":null,"attributes":[{"value":"/ Trait for returning digest result with the variable size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10735,"byte_end":10795,"line_start":8,"line_end":8,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11090,"byte_end":11093,"line_start":15,"line_end":15,"column_start":8,"column_end":11},"name":"new","qualname":"::variable::VariableOutput::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Create new hasher instance with the given output size.","sig":null,"attributes":[{"value":"/ Create new hasher instance with the given output size.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10834,"byte_end":10892,"line_start":10,"line_end":10,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10897,"byte_end":10900,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ It will return `Err(InvalidOutputSize)` in case if hasher can not return","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10905,"byte_end":10981,"line_start":12,"line_end":12,"column_start":5,"column_end":81}},{"value":"/ specified output size. It will always return an error if output size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10986,"byte_end":11058,"line_start":13,"line_end":13,"column_start":5,"column_end":77}},{"value":"/ equals to zero.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11063,"byte_end":11082,"line_start":14,"line_end":14,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11234,"byte_end":11245,"line_start":18,"line_end":18,"column_start":8,"column_end":19},"name":"output_size","qualname":"::variable::VariableOutput::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Get output size of the hasher instance provided to the `new` method\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher instance provided to the `new` method","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11155,"byte_end":11226,"line_start":17,"line_end":17,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11453,"byte_end":11470,"line_start":24,"line_end":24,"column_start":8,"column_end":25},"name":"finalize_variable","qualname":"::variable::VariableOutput::finalize_variable","value":"pub fn finalize_variable<impl FnOnce(&[u8]): FnOnce(&[u8]) ->\n                         ()>(Self, impl FnOnce(&[u8]))","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Retrieve result via closure and consume hasher.","sig":null,"attributes":[{"value":"/ Retrieve result via closure and consume hasher.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11268,"byte_end":11319,"line_start":20,"line_end":20,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11324,"byte_end":11327,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Closure is guaranteed to be called, length of the buffer passed to it","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11332,"byte_end":11405,"line_start":22,"line_end":22,"column_start":5,"column_end":78}},{"value":"/ will be equal to `output_size`.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11410,"byte_end":11445,"line_start":23,"line_end":23,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11699,"byte_end":11722,"line_start":30,"line_end":30,"column_start":8,"column_end":31},"name":"finalize_variable_reset","qualname":"::variable::VariableOutput::finalize_variable_reset","value":"pub fn finalize_variable_reset<impl FnOnce(&[u8]): FnOnce(&[u8]) ->\n                               ()>(&mut Self, impl FnOnce(&[u8]))","parent":{"krate":0,"index":67},"children":[],"decl_id":null,"docs":" Retrieve result via closure and reset the hasher state.","sig":null,"attributes":[{"value":"/ Retrieve result via closure and reset the hasher state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11506,"byte_end":11565,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11570,"byte_end":11573,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Closure is guaranteed to be called, length of the buffer passed to it","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11578,"byte_end":11651,"line_start":28,"line_end":28,"column_start":5,"column_end":78}},{"value":"/ will be equal to `output_size`.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":11656,"byte_end":11691,"line_start":29,"line_end":29,"column_start":5,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13180,"byte_end":13199,"line_start":68,"line_end":68,"column_start":11,"column_end":30},"name":"VariableOutputDirty","qualname":"::variable::VariableOutputDirty","value":"VariableOutputDirty: Sized","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Trait for variable-sized output digest implementations to use to retrieve\n the hash output.","sig":null,"attributes":[{"value":"/ Trait for variable-sized output digest implementations to use to retrieve","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":12784,"byte_end":12861,"line_start":59,"line_end":59,"column_start":1,"column_end":78}},{"value":"/ the hash output.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":12862,"byte_end":12882,"line_start":60,"line_end":60,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":12883,"byte_end":12886,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait in user code is discouraged. Instead use the","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":12887,"byte_end":12955,"line_start":62,"line_end":62,"column_start":1,"column_end":69}},{"value":"/ [`VariableOutput::finalize_variable`] or","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":12956,"byte_end":13000,"line_start":63,"line_end":63,"column_start":1,"column_end":45}},{"value":"/ [`VariableOutput::finalize_variable_reset`] methods.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13001,"byte_end":13057,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13058,"byte_end":13061,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Types which impl this trait along with [`Reset`] will receive a blanket","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13062,"byte_end":13137,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/ impl of [`VariableOutput`].","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13138,"byte_end":13169,"line_start":67,"line_end":67,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13469,"byte_end":13472,"line_start":74,"line_end":74,"column_start":8,"column_end":11},"name":"new","qualname":"::variable::VariableOutputDirty::new","value":"pub fn new(usize) -> Result<Self, InvalidOutputSize>","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Create new hasher instance with the given output size.","sig":null,"attributes":[{"value":"/ Create new hasher instance with the given output size.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13213,"byte_end":13271,"line_start":69,"line_end":69,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13276,"byte_end":13279,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It will return `Err(InvalidOutputSize)` in case if hasher can not return","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13284,"byte_end":13360,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ specified output size. It will always return an error if output size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13365,"byte_end":13437,"line_start":72,"line_end":72,"column_start":5,"column_end":77}},{"value":"/ equals to zero.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13442,"byte_end":13461,"line_start":73,"line_end":73,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13613,"byte_end":13624,"line_start":77,"line_end":77,"column_start":8,"column_end":19},"name":"output_size","qualname":"::variable::VariableOutputDirty::output_size","value":"pub fn output_size(&Self) -> usize","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Get output size of the hasher instance provided to the `new` method\n","sig":null,"attributes":[{"value":"/ Get output size of the hasher instance provided to the `new` method","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13534,"byte_end":13605,"line_start":76,"line_end":76,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13914,"byte_end":13937,"line_start":84,"line_end":84,"column_start":8,"column_end":31},"name":"finalize_variable_dirty","qualname":"::variable::VariableOutputDirty::finalize_variable_dirty","value":"pub fn finalize_variable_dirty<impl FnOnce(&[u8]): FnOnce(&[u8]) ->\n                               ()>(&mut Self, impl FnOnce(&[u8]))","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" Retrieve result into provided buffer and leave hasher in a dirty state.","sig":null,"attributes":[{"value":"/ Retrieve result into provided buffer and leave hasher in a dirty state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13647,"byte_end":13722,"line_start":79,"line_end":79,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13727,"byte_end":13730,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ This method is expected to only be called once unless","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13735,"byte_end":13792,"line_start":81,"line_end":81,"column_start":5,"column_end":62}},{"value":"/ [`Reset::reset`] is called, after which point it can be","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13797,"byte_end":13856,"line_start":82,"line_end":82,"column_start":5,"column_end":64}},{"value":"/ called again and reset again (and so on).","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13861,"byte_end":13906,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":89},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":14795,"byte_end":14804,"line_start":10,"line_end":10,"column_start":11,"column_end":20},"name":"XofReader","qualname":"::xof::XofReader","value":"XofReader","parent":null,"children":[{"krate":0,"index":90}],"decl_id":null,"docs":" Trait for describing readers which are used to extract extendable output\n from XOF (extendable-output function) result.\n","sig":null,"attributes":[{"value":"/ Trait for describing readers which are used to extract extendable output","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":14658,"byte_end":14734,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ from XOF (extendable-output function) result.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":14735,"byte_end":14784,"line_start":9,"line_end":9,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":14897,"byte_end":14901,"line_start":12,"line_end":12,"column_start":8,"column_end":12},"name":"read","qualname":"::xof::XofReader::read","value":"pub fn read(&mut Self, &mut [u8])","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Read output into the `buffer`. Can be called an unlimited number of times.\n","sig":null,"attributes":[{"value":"/ Read output into the `buffer`. Can be called an unlimited number of times.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":14811,"byte_end":14889,"line_start":11,"line_end":11,"column_start":5,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":91},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15534,"byte_end":15550,"line_start":30,"line_end":30,"column_start":11,"column_end":27},"name":"ExtendableOutput","qualname":"::xof::ExtendableOutput","value":"ExtendableOutput: Sized","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" Trait which describes extendable-output functions (XOF).\n","sig":null,"attributes":[{"value":"/ Trait which describes extendable-output functions (XOF).","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15463,"byte_end":15523,"line_start":29,"line_end":29,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":92},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15584,"byte_end":15590,"line_start":32,"line_end":32,"column_start":10,"column_end":16},"name":"Reader","qualname":"::xof::ExtendableOutput::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Reader\n","sig":null,"attributes":[{"value":"/ Reader","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15564,"byte_end":15574,"line_start":31,"line_end":31,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15668,"byte_end":15680,"line_start":35,"line_end":35,"column_start":8,"column_end":20},"name":"finalize_xof","qualname":"::xof::ExtendableOutput::finalize_xof","value":"pub fn finalize_xof(Self) -> Self::Reader","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and consume hasher instance.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and consume hasher instance.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15608,"byte_end":15660,"line_start":34,"line_end":34,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15773,"byte_end":15791,"line_start":38,"line_end":38,"column_start":8,"column_end":26},"name":"finalize_xof_reset","qualname":"::xof::ExtendableOutput::finalize_xof_reset","value":"pub fn finalize_xof_reset(&mut Self) -> Self::Reader","parent":{"krate":0,"index":91},"children":[],"decl_id":null,"docs":" Retrieve XOF reader and reset hasher instance state.\n","sig":null,"attributes":[{"value":"/ Retrieve XOF reader and reset hasher instance state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15709,"byte_end":15765,"line_start":37,"line_end":37,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17220,"byte_end":17241,"line_start":76,"line_end":76,"column_start":11,"column_end":32},"name":"ExtendableOutputDirty","qualname":"::xof::ExtendableOutputDirty","value":"ExtendableOutputDirty: Sized","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"decl_id":null,"docs":" Trait for extendable-output function (XOF) implementations to use to\n retrieve the hash output.","sig":null,"attributes":[{"value":"/ Trait for extendable-output function (XOF) implementations to use to","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":16824,"byte_end":16896,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/ retrieve the hash output.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":16897,"byte_end":16926,"line_start":68,"line_end":68,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":16927,"byte_end":16930,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Usage of this trait in user code is discouraged. Instead use the","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":16931,"byte_end":16999,"line_start":70,"line_end":70,"column_start":1,"column_end":69}},{"value":"/ [`ExtendableOutput::finalize_xof`] or","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17000,"byte_end":17041,"line_start":71,"line_end":71,"column_start":1,"column_end":42}},{"value":"/ [`ExtendableOutput::finalize_xof_reset`] methods.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17042,"byte_end":17095,"line_start":72,"line_end":72,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17096,"byte_end":17099,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Types which impl this trait along with [`Reset`] will receive a blanket","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17100,"byte_end":17175,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ impl of [`ExtendableOutput`].","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17176,"byte_end":17209,"line_start":75,"line_end":75,"column_start":1,"column_end":34}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17275,"byte_end":17281,"line_start":78,"line_end":78,"column_start":10,"column_end":16},"name":"Reader","qualname":"::xof::ExtendableOutputDirty::Reader","value":"type Reader: XofReader;","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Reader\n","sig":null,"attributes":[{"value":"/ Reader","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17255,"byte_end":17265,"line_start":77,"line_end":77,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17515,"byte_end":17533,"line_start":85,"line_end":85,"column_start":8,"column_end":26},"name":"finalize_xof_dirty","qualname":"::xof::ExtendableOutputDirty::finalize_xof_dirty","value":"pub fn finalize_xof_dirty(&mut Self) -> Self::Reader","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Retrieve XOF reader.","sig":null,"attributes":[{"value":"/ Retrieve XOF reader.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17299,"byte_end":17323,"line_start":80,"line_end":80,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17328,"byte_end":17331,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This method is expected to only be called once unless","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17336,"byte_end":17393,"line_start":82,"line_end":82,"column_start":5,"column_end":62}},{"value":"/ [`Reset::reset`] is called, after which point it can be","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17398,"byte_end":17457,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ called again and reset again (and so on).","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17462,"byte_end":17507,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":121},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2297,"byte_end":2303,"line_start":62,"line_end":62,"column_start":11,"column_end":17},"name":"Update","qualname":"::Update","value":"Update","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124}],"decl_id":null,"docs":" Trait for updating digest state with input data.\n","sig":null,"attributes":[{"value":"/ Trait for updating digest state with input data.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2234,"byte_end":2286,"line_start":61,"line_end":61,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2442,"byte_end":2448,"line_start":67,"line_end":67,"column_start":8,"column_end":14},"name":"update","qualname":"::Update::update","value":"pub fn update<impl AsRef<[u8]>: AsRef<[u8]>>(&mut Self, impl AsRef<[u8]>)","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":" Digest input data.","sig":null,"attributes":[{"value":"/ Digest input data.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2310,"byte_end":2332,"line_start":63,"line_end":63,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2337,"byte_end":2340,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This method can be called repeatedly, e.g. for processing streaming","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2345,"byte_end":2416,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ messages.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2421,"byte_end":2434,"line_start":66,"line_end":66,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2540,"byte_end":2545,"line_start":70,"line_end":70,"column_start":8,"column_end":13},"name":"chain","qualname":"::Update::chain","value":"pub fn chain<impl AsRef<[u8]>: AsRef<[u8]>>(Self, impl AsRef<[u8]>) -> Self\nwhere Self: Sized","parent":{"krate":0,"index":121},"children":[],"decl_id":null,"docs":" Digest input data in a chained manner.\n","sig":null,"attributes":[{"value":"/ Digest input data in a chained manner.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2490,"byte_end":2532,"line_start":69,"line_end":69,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2852,"byte_end":2862,"line_start":83,"line_end":83,"column_start":11,"column_end":21},"name":"BlockInput","qualname":"::BlockInput","value":"BlockInput","parent":null,"children":[{"krate":0,"index":127}],"decl_id":null,"docs":" Trait to indicate that digest function processes data in blocks of size\n `BlockSize`.","sig":null,"attributes":[{"value":"/ Trait to indicate that digest function processes data in blocks of size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2674,"byte_end":2749,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ `BlockSize`.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2750,"byte_end":2766,"line_start":80,"line_end":80,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2767,"byte_end":2770,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main usage of this trait is for implementing HMAC generically.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2771,"byte_end":2841,"line_start":82,"line_end":82,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":127},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2893,"byte_end":2902,"line_start":85,"line_end":85,"column_start":10,"column_end":19},"name":"BlockSize","qualname":"::BlockInput::BlockSize","value":"type BlockSize: ArrayLength<u8>;","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Block size\n","sig":null,"attributes":[{"value":"/ Block size","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2869,"byte_end":2883,"line_start":84,"line_end":84,"column_start":5,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2973,"byte_end":2978,"line_start":89,"line_end":89,"column_start":11,"column_end":16},"name":"Reset","qualname":"::Reset","value":"Reset","parent":null,"children":[{"krate":0,"index":129}],"decl_id":null,"docs":" Trait for resetting hash instances\n","sig":null,"attributes":[{"value":"/ Trait for resetting hash instances","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2924,"byte_end":2962,"line_start":88,"line_end":88,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":3065,"byte_end":3070,"line_start":91,"line_end":91,"column_start":8,"column_end":13},"name":"reset","qualname":"::Reset::reset","value":"pub fn reset(&mut Self)","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Reset hasher instance to its initial state and return current state.\n","sig":null,"attributes":[{"value":"/ Reset hasher instance to its initial state and return current state.","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/lib.rs","byte_start":2985,"byte_end":3057,"line_start":90,"line_end":90,"column_start":5,"column_end":77}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5228,"byte_end":5229,"line_start":52,"line_end":52,"column_start":68,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/errors.rs","byte_start":8063,"byte_end":8080,"line_start":7,"line_end":7,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":10252,"byte_end":10253,"line_start":58,"line_end":58,"column_start":51,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":14032,"byte_end":14033,"line_start":87,"line_end":87,"column_start":57,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17625,"byte_end":17626,"line_start":88,"line_end":88,"column_start":61,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/digest.rs","byte_start":5228,"byte_end":5229,"line_start":52,"line_end":52,"column_start":68,"column_end":69},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":26},"to":{"krate":0,"index":13}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/errors.rs","byte_start":8063,"byte_end":8080,"line_start":7,"line_end":7,"column_start":23,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":131},"to":{"krate":1,"index":6836}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/fixed.rs","byte_start":10252,"byte_end":10253,"line_start":58,"line_end":58,"column_start":51,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":59},"to":{"krate":0,"index":49}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":10822,"byte_end":10827,"line_start":9,"line_end":9,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":13201,"byte_end":13206,"line_start":68,"line_end":68,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":74}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/variable.rs","byte_start":14032,"byte_end":14033,"line_start":87,"line_end":87,"column_start":57,"column_end":58},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":80},"to":{"krate":0,"index":67}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":15552,"byte_end":15557,"line_start":30,"line_end":30,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":91}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17243,"byte_end":17248,"line_start":76,"line_end":76,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":1,"index":2076},"to":{"krate":0,"index":95}},{"span":{"file_name":"/home/tardigrade/.cargo/registry/src/github.com-1ecc6299db9ec823/digest-0.9.0/src/xof.rs","byte_start":17625,"byte_end":17626,"line_start":88,"line_end":88,"column_start":61,"column_end":62},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":99},"to":{"krate":0,"index":91}}]}